---
AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Parent Stacks
      Parameters:
      - ParentVPCStack
      - ParentECSStack
      - ParentAlertStack
    - Label:
        default: Service Parameters
      Parameters:
      - ContainerName
      - DesiredCount
      - CPUReservation
      - MemoryLimit
      - MemoryReservation
      - HealthCheckGracePeriodSeconds
      - TaskDeregistrationDelay
      - ExternalFacing
      - LoadBalancerPriority
    - Label:
        default: Container Registry Parameters
      Parameters:
        - RegistryAWSAccountId
        - RegistryAWSRegion
    - Label:
        default: Application Parameters
      Parameters:
      - ApplicationContext
      - JavaOptions
      - SpringProfile
    - Label:
        default: Logging Parameters
      Parameters:
      - SplunkToken
      - SplunkUrl

Parameters:
  ParentVPCStack:
    Type: String

  ParentECSStack:
    Type: String

  ParentAlertStack:
    Type: String
    Default: ''

  ContainerName:
    Type: String

  DesiredCount:
    Type: Number
    Default: 1

  HealthCheckGracePeriodSeconds:
    Type: Number
    Default: 300

  TaskDeregistrationDelay:
    Type: Number
    Default: 15

  ExternalFacing:
    Description: Boolean flag which enables the service to be exposed via the external load balancer
    Type: String
    Default: false
    AllowedValues: [true, false]

  LoadBalancerPriority:
    Description: The priority of the service in the load balancer
    Type: Number
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: 'Priority must be provided'

  ApplicationContext:
    Type: String

  JavaOptions:
    Type: String

  SpringProfile:
    Type: String

  CPUReservation:
    Description: The number of cpu units to reserve for the container. This is only enforced when CPU cycles are constrained.
    Type: Number
    Default: 128
    AllowedValues: [0, 10, 20, 32, 64, 128, 256, 512, 1024, 2048, 4096]

  MemoryReservation:
    Description: The memory reservation for the task, this is the expected upper limit during normal operations.
    Type: Number
    Default: 768
    AllowedValues: [16, 32, 64, 128, 256, 512, 768, 1024, 1280, 1536, 1792, 2048, 2304, 2560, 2816, 3072, 3328, 3584, 3840, 4096]

  MemoryLimit:
    Description: The memory limit for the task, when reached the task will be automatically terminated
    Type: Number
    Default: 768
    AllowedValues: [16, 32, 64, 128, 256, 512, 768, 1024, 1280, 1536, 1792, 2048, 2304, 2560, 2816, 3072, 3328, 3584, 3840, 4096]

  SplunkToken:
    Type: String
    NoEcho: true

  SplunkUrl:
    Type: String

  RegistryAWSAccountId:
    Type: String

  RegistryAWSRegion:
    Type: String

Conditions:
  IsExternalFacing: !Equals [!Ref ExternalFacing, true]
  IsInternalFacing: !Equals [!Ref ExternalFacing, false]
  CreateExternalAlarms: !And
    - !Not [!Equals [!Ref ParentAlertStack, '']]
    - !Equals [!Ref ExternalFacing, true]
  CreateInternalAlarms: !And
    - !Not [!Equals [!Ref ParentAlertStack, '']]
    - !Equals [!Ref ExternalFacing, false]

Resources:
  ExternalTargetGroup:
    Condition: IsExternalFacing
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Sub '/actuator/health'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5 # Healthcheck timeout must be smaller than the interval
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref TaskDeregistrationDelay

  ExternalHttpsListenerRule:
    DependsOn: ExternalTargetGroup
    Condition: IsExternalFacing
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        'Fn::ImportValue': !Sub '${ParentECSStack}-ExternalLoadBalancerHttpsListener'
      Priority: !Ref LoadBalancerPriority
      Conditions:
      - Field: path-pattern
        Values:
        - !Sub "${ApplicationContext}/*"
      Actions:
      - TargetGroupArn: !Ref ExternalTargetGroup
        Type: forward

  InternalTargetGroup:
    Condition: IsInternalFacing
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Sub '/actuator/health'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5 # Healthcheck timeout must be smaller than the interval
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref TaskDeregistrationDelay

  InternalHttpsListenerRule:
    DependsOn: InternalTargetGroup
    Condition: IsInternalFacing
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        'Fn::ImportValue': !Sub '${ParentECSStack}-InternalLoadBalancerHttpsListener'
      Priority: !Ref LoadBalancerPriority
      Conditions:
      - Field: path-pattern
        Values:
        - !Sub "${ApplicationContext}/*"
      Actions:
      - TargetGroupArn: !Ref InternalTargetGroup
        Type: forward

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  TaskeRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ExternalService:
    DependsOn:
      - ExternalTargetGroup
      - TaskDefinition
      - ServiceRole
    Condition: IsExternalFacing
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub '${ParentECSStack}-Cluster'
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds
      PlacementStrategies:
      - Type: spread
        Field: 'attribute:ecs.availability-zone'
      - Type: spread
        Field: 'instanceId'
      - Type: binpack
        Field: 'memory'
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
      - ContainerName: !Ref ContainerName
        ContainerPort: 8080
        TargetGroupArn: !Ref ExternalTargetGroup

  InternalService:
    DependsOn:
      - InternalTargetGroup
      - TaskDefinition
      - ServiceRole
    Condition: IsInternalFacing
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub '${ParentECSStack}-Cluster'
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds
      PlacementStrategies:
      - Type: spread
        Field: 'attribute:ecs.availability-zone'
      - Type: spread
        Field: 'instanceId'
      - Type: binpack
        Field: 'memory'
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
      - ContainerName: !Ref ContainerName
        ContainerPort: 8080
        TargetGroupArn: !Ref InternalTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-Task
      TaskRoleArn: !Ref IndexControllerTaskRole
      ContainerDefinitions:
      - Name: !Ref ContainerName
        Image: !Join ['', ["Fn::Sub": '${RegistryAWSAccountId}.dkr.ecr.${RegistryAWSRegion}.amazonaws.com/', "Fn::ImportValue": {"Fn::Sub":'${AWS::StackName}-RepositoryName'}, ':latest']]
        Essential: true
        Cpu: !Ref CPUReservation
        Memory: !Ref MemoryLimit
        MemoryReservation: !Ref MemoryReservation
        HealthCheck:
          Command:
            - "CMD-SHELL"
            - "wget --quiet --tries=1 --spider --timeout=30 http://localhost:8080/actuator/health || exit 1"
          StartPeriod: !Ref HealthCheckGracePeriodSeconds
          Timeout: 30
        PortMappings:
        - ContainerPort: 8080
        LogConfiguration:
          LogDriver: splunk
          Options:
            splunk-format: raw
            splunk-token: !Ref SplunkToken
            splunk-url: !Ref SplunkUrl
            splunk-insecureskipverify: true
        Environment:
          - Name: JAVA_OPTS
            Value: !Ref JavaOptions
          - Name: SPRING_PROFILES_ACTIVE
            Value: !Ref SpringProfile

  HTTPCodeExternalTarget5XXTooHighAlarm:
    DependsOn:
      - ExternalTargetGroup
    Condition: CreateExternalAlarms
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: '${AWS::StackName} HTTP 500 response code alarm'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value:
          'Fn::ImportValue': !Sub '${ParentECSStack}-ExternalLoadBalancerName'
      - Name: TargetGroup
        Value: !GetAtt 'ExternalTargetGroup.TargetGroupFullName'
  NoHealthyExternalServiceAlarm:
    DependsOn:
      - ExternalTargetGroup
      - ExternalService
    Condition: CreateExternalAlarms
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: '${AWS::StackName} has no healthy services'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HealthyHostCount
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 1
      TreatMissingData: breaching
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value:
          'Fn::ImportValue': !Sub '${ParentECSStack}-ExternalLoadBalancerName'
      - Name: TargetGroup
        Value: !GetAtt 'ExternalTargetGroup.TargetGroupFullName'

  HTTPCodeInternalTarget5XXTooHighAlarm:
    DependsOn:
      - InternalTargetGroup
    Condition: CreateInternalAlarms
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: '${AWS::StackName} HTTP 500 response code alarm'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value:
          'Fn::ImportValue': !Sub '${ParentECSStack}-InternalLoadBalancerName'
      - Name: TargetGroup
        Value: !GetAtt 'InternalTargetGroup.TargetGroupFullName'
  NoHealthyInternalServiceAlarm:
    DependsOn:
      - InternalTargetGroup
      - InternalService
    Condition: CreateInternalAlarms
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: '${AWS::StackName} has no healthy services'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HealthyHostCount
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 1
      TreatMissingData: breaching
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value:
          'Fn::ImportValue': !Sub '${ParentECSStack}-InternalLoadBalancerName'
      - Name: TargetGroup
        Value: !GetAtt 'InternalTargetGroup.TargetGroupFullName'

Outputs:
  ExternalServiceName:
    Condition: IsExternalFacing
    Description: 'The name of the external service running the ECS'
    Value: !Ref ExternalService
    Export:
      Name: !Sub '${AWS::StackName}-Name'
  InternalServiceName:
    Condition: IsInternalFacing
    Description: 'The name of the internal service running the ECS'
    Value: !Ref InternalService
    Export:
      Name: !Sub '${AWS::StackName}-Name'
  ApplicationContext:
    Description: 'The application context of the service'
    Value: !Sub "${ApplicationContext}/"
  ContainerName:
    Description: 'The container name for the service'
    Value: !Ref ContainerName
    Export:
      Name: !Sub '${AWS::StackName}-ContainerName'
