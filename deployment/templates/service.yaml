---
AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Parent Stacks
      Parameters:
      - ParentVPCStack
      - ParentECSStack
      - ParentAlertStack
    - Label:
        default: Service Parameters
      Parameters:
      - ContainerName
      - DesiredCount
      - CPUReservation
      - MemoryLimit
      - MemoryReservation
      - HealthCheckGracePeriodSeconds
    - Label:
        default: Application Parameters
      Parameters:
      - ApplicationContext
      - JavaOptions
      - SpringProfile
    - Label:
        default: Logging Parameters
      Parameters:
      - SplunkToken
      - SplunkUrl
      - SplunkEnv

Parameters:
  ParentVPCStack:
    Type: String

  ParentECSStack:
    Type: String

  ParentAlertStack:
    Type: String
    Default: ""

  ContainerName:
    Type: String

  DesiredCount:
    Type: Number
    Default: 1

  HealthCheckGracePeriodSeconds:
    Type: Number
    Default: 60

  TaskDeregistrationDelay:
    Type: Number
    Default: 15

  ApplicationContext:
    Type: String

  JavaOptions:
    Type: String

  SpringProfile:
    Type: String

  MemoryReservation:
    Type: Number
    Default: 768
    AllowedValues: [16, 32, 64, 128, 256, 512, 768, 1024, 1280, 1536, 1792, 2048, 2304, 2560, 2816, 3072, 3328, 3584, 3840, 4096]

  MemoryLimit:
    Type: Number
    Default: 768
    AllowedValues: [16, 32, 64, 128, 256, 512, 768, 1024, 1280, 1536, 1792, 2048, 2304, 2560, 2816, 3072, 3328, 3584, 3840, 4096]

  CPUReservation:
    Type: Number
    Default: 128
    AllowedValues: [10, 128, 256, 512, 1024]

  SplunkToken:
    Type: String
    NoEcho: true

  SplunkUrl:
    Type: String

  SplunkEnv:
    Default: Production
    Type: String
    AllowedValues: [Development, Production]

Conditions:
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]

Resources:
  ExternalTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Sub '/actuator/health'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5 # Healthcheck timeout must be smaller than the interval
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref TaskDeregistrationDelay

  ExternalListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        'Fn::ImportValue': !Sub '${ParentECSStack}-ExternalLoadBalancerListener'
      Priority: 6
      Conditions:
      - Field: path-pattern
        Values:
        - !Sub "${ApplicationContext}/*"
      Actions:
      - TargetGroupArn: !Ref ExternalTargetGroup
        Type: forward

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        'Fn::ImportValue': !Sub '${ParentECSStack}-Cluster'
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriodSeconds
      PlacementStrategies:
      - Type: spread
        Field: 'attribute:ecs.availability-zone'
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
      - ContainerName: !Ref ContainerName
        ContainerPort: 8080
        TargetGroupArn: !Ref ExternalTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-Task
      ContainerDefinitions:
      - Name: !Ref ContainerName
        Image: !Join ['', ["Fn::Sub": '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/', "Fn::ImportValue": {"Fn::Sub":'${AWS::StackName}-RepositoryName'}, ':latest']]
        Essential: true
        Cpu: !Ref CPUReservation
        Memory: !Ref MemoryLimit
        MemoryReservation: !Ref MemoryReservation
        PortMappings:
        - ContainerPort: 8080
        LogConfiguration:
          LogDriver: splunk
          Options:
            splunk-format: raw
            splunk-token: !Ref SplunkToken
            splunk-url: !Ref SplunkUrl
            env: !Ref SplunkEnv
            splunk-insecureskipverify: true
        Environment:
          - Name: JAVA_OPTS
            Value: !Ref JavaOptions
          - Name: SPRING_PROFILES_ACTIVE
            Value: !Ref SpringProfile

  HTTPCodeTarget5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: '${AWS::StackName} HTTP 500 response code alarm'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      TreatMissingData: notBreaching
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value:
          'Fn::ImportValue': !Sub '${ParentECSStack}-ExternalLoadBalancerName'
      - Name: TargetGroup
        Value: !GetAtt 'ExternalTargetGroup.TargetGroupFullName'
  NoHealthyServiceAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: '${AWS::StackName} has no healthy services'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HealthyHostCount
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 1
      TreatMissingData: breaching
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Dimensions:
      - Name: LoadBalancer
        Value:
          'Fn::ImportValue': !Sub '${ParentECSStack}-ExternalLoadBalancerName'
      - Name: TargetGroup
        Value: !GetAtt 'ExternalTargetGroup.TargetGroupFullName'

Outputs:
  ServiceName:
    Description: 'The name of the service running the ECS'
    Value: !Ref Service
    Export:
      Name: !Sub '${AWS::StackName}-Name'
  ApplicationContext:
    Description: 'The application context of the service'
    Value: !Sub "${ApplicationContext}/"
  ContainerName:
    Description: 'The container name for the service'
    Value: !Ref ContainerName
    Export:
      Name: !Sub '${AWS::StackName}-ContainerName'
