---
AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Parent Stacks
      Parameters:
      - ParentECSStack
      - ParentServiceStack
    - Label:
        default: Git Parameters
      Parameters:
      - GitHubUser
      - GitHubRepo
      - GitHubBranch
      - GitHubToken

Parameters:
  ParentECSStack:
    Type: String

  ParentServiceStack:
    Type: String

  GitHubUser:
    Type: String

  GitHubRepo:
    Type: String

  GitHubBranch:
    Type: String

  GitHubToken:
    Type: String
    NoEcho: true

Resources:
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Resource: "*"
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ecr:GetAuthorizationToken
          - Resource: !Join ['', ['arn:aws:s3:::', "Fn::ImportValue": {"Fn::Sub":'${ParentECSStack}-BuildCacheBucket'}, '/*']]
            Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:GetObjectVersion
          - Resource: !Join ['', ["Fn::Sub": 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/', "Fn::ImportValue": {"Fn::Sub":'${ParentServiceStack}-RepositoryName'}, '']]
            Effect: Allow
            Action:
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability
            - ecr:PutImage
            - ecr:InitiateLayerUpload
            - ecr:UploadLayerPart
            - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Resource: !Join ['', ['arn:aws:s3:::', "Fn::ImportValue": {"Fn::Sub":'${ParentECSStack}-BuildCacheBucket'}, '/*']]
            Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
          - Resource: "*"
            Effect: Allow
            Action:
            - ecs:DescribeServices
            - ecs:DescribeTaskDefinition
            - ecs:DescribeTasks
            - ecs:ListTasks
            - ecs:RegisterTaskDefinition
            - ecs:UpdateService
            - codebuild:StartBuild
            - codebuild:BatchGetBuilds
            - iam:PassRole

  JavaBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Cache:
        Type: S3
        Location: !Join ['', ['arn:aws:s3:::', "Fn::ImportValue": {"Fn::Sub":'${ParentECSStack}-BuildCacheBucket'}, '/gradle-cache']]
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2

          phases:
            install:
              commands:
                - echo Nothing to do in the install phase...
            pre_build:
              commands:
                - $(aws ecr get-login --no-include-email)
                - export LC_ALL="en_US.UTF-8"
                - locale-gen en_US en_US.UTF-8
                - dpkg-reconfigure locales
                - locale
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - echo "Tag is ${TAG}"
                - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
                - echo setting gradlew build permissions...
                - chmod +x gradlew
            build:
              commands:
                - echo Build started on `date`
                - echo Running [./gradlew clean assemble check docker dockerTag dockerPush -PTAG=${TAG} -PREPOSITORY_URI=${REPOSITORY_URI}]
                - ./gradlew clean assemble check docker dockerTag dockerPush -PTAG=${TAG} -PREPOSITORY_URI=${REPOSITORY_URI}"
                - printf '[{"name":"%s","imageUri":"%s"}]' "${CONTAINER_NAME_ARG}" "${REPOSITORY_URI}:${TAG}" > images.json
                - echo [{"name":"${CONTAINER_NAME_ARG}","imageUri":"${REPOSITORY_URI}:${TAG}"}]
                - echo Build completed on `date`
          cache:
            paths:
              - '/root/.gradle/caches/**/*'
          artifacts:
            files:
              - images.json
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/java:openjdk-8"
        Type: "LINUX_CONTAINER"
        PrivilegedMode: true
        EnvironmentVariables:
        - Name: AWS_DEFAULT_REGION
          Value: !Ref AWS::Region
        - Name: REPOSITORY_URI
          Value: !Join ['', ["Fn::Sub": '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/', "Fn::ImportValue": {"Fn::Sub":'${ParentServiceStack}-RepositoryName'}, '']]
        - Name: CONTAINER_NAME_ARG
          Value:
            'Fn::ImportValue': !Sub '${ParentServiceStack}-ContainerName'
      Name: !Sub Java-build-${AWS::StackName}
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location:
          'Fn::ImportValue': !Sub '${ParentECSStack}-BuildCacheBucket'
      Stages:
      - Name: GitHub-Source-Code
        Actions:
        - Name: Code
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: 1
            Provider: GitHub
          Configuration:
            Owner: !Ref GitHubUser
            Repo: !Ref GitHubRepo
            Branch: !Ref GitHubBranch
            OAuthToken: !Ref GitHubToken
          OutputArtifacts:
          - Name: ApplicationSourceCode
          RunOrder: 1
      - Name: JavaGradleBuild
        Actions:
        - Name: Build
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: 1
            Provider: CodeBuild
          Configuration:
            ProjectName: !Ref JavaBuildProject
          InputArtifacts:
          - Name: ApplicationSourceCode
          OutputArtifacts:
          - Name: BuildOutput
          RunOrder: 1
      - Name: Deploy
        Actions:
        - Name: Deploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: 1
            Provider: ECS
          Configuration:
            ClusterName:
              'Fn::ImportValue': !Sub '${ParentECSStack}-Cluster'
            ServiceName:
              'Fn::ImportValue': !Sub '${ParentServiceStack}-Name'
            FileName: images.json
          InputArtifacts:
          - Name: BuildOutput
          RunOrder: 1

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
